#include <iostream>
#include <stdio.h>
#include <pthread.h>


const int LENGTH_OF_MATRIX = 11;
const int CENTER_OF_MATRIX = (LENGTH_OF_MATRIX -1)/2;

struct thread_data{
    float ***array;
    int start_index;
    int end_index;
    float answer;
};

// Create 3D array
float*** create_3D_array(int n){
    float ***array = nullptr;
    array = new float**[n];

    for(int i = 0; i < n; i++){
        array[i] = new float*[n];

        for(int j = 0; j < n; j++){
            array[i][j] = new float[n];

            for(int k = 0; k < n; k++){
                array[i][j][k] = 0;
            }
        }
    }

    return array;
}

// Delete 3D array
void delete_3D_array(float ***array, int n){

    for(int i = 0; i < n; i++){

        for(int j = 0; j < n; j++){
            delete[] array[i][j];
        }
        delete[] array[i];
    }
    delete[] array;
}

//  Print 3D array
void print_array(float ***array, int n){
    for (int Row = 1; Row < n - 1; Row++){
        for (int Col = 1; Col < n - 1; Col++) {
            for (int Height = 1; Height < n - 1; Height++) {
                printf("%f, ", array[Row][Col][Height]);
            }
            printf("\n");
        }
        printf("\n***\n");
    }
    printf("\n%%%%%%%%%%%%\n");
}

void* jacobianIt(void* arg){
    struct thread_data *arg_struct = (struct thread_data*) arg;
    long sum = 0;
    for (int Row = 1; Row < LENGTH_OF_MATRIX - 1; Row++) {
        for (int Col = 1; Col < LENGTH_OF_MATRIX - 1; Col++) {
            for (int Height = arg_struct->start_index; Height < arg_struct->end_index - 1; Height++) {
                sum += arg_struct->array[Row][Col][Height];
            }
        }
    }
    arg_struct->answer = sum;
    pthread_exit(nullptr);
}

// Main thread
int main(int argc, char **argv) {

    //Check if input is valid
    if(argc > 3){
        printf("Usage: %s <num> <num>\n", argv[0]);
        exit(-1);
    }

    // Get number of threads and cube size
    int num_threads = atoi(argv[1]);
    int len_array = atoi(argv[2]);

    // Check if len_array is odd
    if(len_array%2 != 1){
        printf("argv[2] must be odd\n");
        exit(-1);
    }

    // Create and display 3D array with point change in center
    float*** dataArray = create_3D_array(LENGTH_OF_MATRIX);
    dataArray[CENTER_OF_MATRIX][CENTER_OF_MATRIX][CENTER_OF_MATRIX] = 1;
    print_array(dataArray,LENGTH_OF_MATRIX);

    // Create list of thread data, 1 entry for each thread
    struct thread_data args[num_threads];

    int sliced_index_start = 1;
    int sliced_index_end;
    int array_slice_len = len_array/num_threads + len_array%num_threads/num_threads + 1;
    printf("array_slice_len = %d\n", array_slice_len);

    pthread_t tid[num_threads];
    for(int i = 0; i < num_threads; i++){

        // Calculate data for threads
        args[i].array = dataArray;
        sliced_index_end = sliced_index_start + array_slice_len;
        if(sliced_index_end > len_array){
            sliced_index_end = len_array;
        }

        printf("Thread %d array_slice_start = %d\n", i, sliced_index_start);
        printf("Thread %d array_slice_end = %d\n", i, sliced_index_end);

        args[i].start_index = sliced_index_start;
        args[i].end_index = sliced_index_end;

        pthread_attr_t attr;
        pthread_attr_init(&attr);
        pthread_create(&tid[i], &attr, jacobianIt, &args[i]);

        // Set endpoint of last thread to start point of next thread
        sliced_index_start = sliced_index_end;

    }


    //TODO: Could do other thing here!!

    //Wait until thread is done
    for(int i = 0; i < num_threads; i++) {
        pthread_join(tid[i], nullptr);
        printf("%f\n",args[i].answer);
    }

    return EXIT_SUCCESS;
}